import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { getAuthToken } from "../utils/cookies"

export const booksApi = createApi({
  reducerPath: "booksApi",
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.NEXT_PUBLIC_API_URL || "http://127.0.0.1:8000",
    prepareHeaders: (headers, { getState }) => {
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ Redux
      let token = getState().auth.token

      // –Ø–∫—â–æ –≤ Redux –Ω–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–±—É—î–º–æ –∑ cookies
      if (!token) {
        token = getAuthToken()
      }

      if (token) {
        headers.set("authorization", `Bearer ${token}`)
      }

      headers.set("Content-Type", "application/json")
      headers.set("Accept", "application/json")
      return headers
    },
    // –î–æ–¥–∞—î–º–æ mode –¥–ª—è CORS
    mode: "cors",
    // –î–æ–¥–∞—î–º–æ credentials
    credentials: "include",
    // –î–æ–¥–∞—î–º–æ timeout
    timeout: 15000,
  }),
  tagTypes: ["Book", "Favorites"],
  endpoints: (builder) => ({
    getBooks: builder.query({
      query: (params) => {
        const requestConfig = {
          url: "/scraping/book_list/",
          params: {
            ...params,
            // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            ...(params?.title && { title: params.title }),
            ...(params?.genre && { genre: params.genre }),
            ...(params?.fromYear && { fromYear: params.fromYear }),
            ...(params?.toYear && { toYear: params.toYear }),
          },
        }

        // Debug –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏
        if (process.env.NODE_ENV === "development") {
          console.log("üìö Books API Request:", requestConfig)
          console.log("üåê Full URL:", `${process.env.NEXT_PUBLIC_API_URL}/scraping/book_list/`)
        }

        return requestConfig
      },
      transformResponse: (response, meta, arg) => {
        console.log("üìö Books API Response:", response)

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É Django REST framework pagination
        if (response && typeof response === "object" && response.results) {
          return {
            books: response.results || [],
            total: response.count || 0,
            page: arg?.page || 1,
            limit: arg?.limit || 12,
          }
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - —Ü–µ –ø—Ä–æ—Å—Ç–æ –º–∞—Å–∏–≤ –∫–Ω–∏–≥
        if (Array.isArray(response)) {
          return {
            books: response,
            total: response.length,
            page: arg?.page || 1,
            limit: arg?.limit || 12,
          }
        }

        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∂–µ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        return {
          books: response?.books || response || [],
          total: response?.total || response?.count || 0,
          page: arg?.page || 1,
          limit: arg?.limit || 12,
        }
      },
      transformErrorResponse: (response, meta, arg) => {
        console.error("üö® Books API Error:", response)
        console.error("üö® Meta:", meta)
        console.error("üö® Args:", arg)
        return response
      },
      providesTags: ["Book"],
    }),
    getBookById: builder.query({
      query: (id) => `/scraping/book_detail/${id}/`,
      providesTags: (result, error, id) => [{ type: "Book", id }],
    }),
    getRecommendedBooks: builder.query({
      query: (bookId) => `/scraping/book_detail/${bookId}/recommended/`,
      providesTags: ["Book"],
    }),
    getFavorites: builder.query({
      query: () => "/scraping/book_favorites/", // Update to match your actual backend endpoint
      providesTags: ["Favorites"],
      transformErrorResponse: (response) => {
        console.error("‚ùå Get Favorites API Error:", response)
        return response
      },
    }),
    addToFavorites: builder.mutation({
      query: (bookId) => ({
        url: `/scraping/book_favorites_add/`, // Update to match your actual backend endpoint
        method: "POST",
      }),
      invalidatesTags: ["Favorites"],
      transformErrorResponse: (response) => {
        console.error("‚ùå Add to Favorites API Error:", response)
        return response
      },
    }),
    removeFromFavorites: builder.mutation({
      query: (bookId) => ({
        url: `/scraping/book_favorites_remove/${bookId}/`, // Update to match your actual backend endpoint
        method: "DELETE",
      }),
      invalidatesTags: ["Favorites"],
      transformErrorResponse: (response) => {
        console.error("‚ùå Remove from Favorites API Error:", response)
        return response
      },
    }),
  }),
})

export const {
  useGetBooksQuery,
  useGetBookByIdQuery,
  useGetRecommendedBooksQuery,
  useGetFavoritesQuery,
  useAddToFavoritesMutation,
  useRemoveFromFavoritesMutation,
} = booksApi
